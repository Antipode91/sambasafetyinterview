@RestResource(urlMapping='/dataIntegration/*')
/**
 * Processes the incoming JSON request, and then sends it to a router to perform the
 * appropriate updating based on SObject type.
 */
global with sharing class DataProcessCoordinator {

    /**
     * The HTTP PATCH method to process incoming data.
     * Deserialization from JSON would typically happen here.
     */
    @HttpPatch
    public static void processIncomingData() {
        // Deserialization process
        // This is where we would normally deserialize the incoming JSON data
        // into the required Map<Map<String, String>, List<SObject>> structure.
        // For now, we'll use a placeholder to represent this data structure.
        // Map<Map<String, String>, List<SObject>> finalData = new Map<Map<String, String>, List<SObject>>();

        // Call the method to update records using the deserialized data
        // prepareRecordsToUpdate(finalData);
    }

    /**
     * Method to update records in Salesforce.
     * This method takes the deserialized Map<Map<String, String>, List<SObject>> as a parameter.
     * Map<String, String> contains the field API and the value to update.
     * List<SObject> contains the various records to update.
     */
    private static void prepareRecordsToUpdate(Map<Map<String, String>, List<SObject>> jsonData) {
        List<SObject> recordsToUpdate = new List<SObject>();
        Set<Map<String, String>> fieldMaps = jsonData.keySet(); //Mainly here to assist in debugging
        System.debug('Field Maps: ' + fieldMaps);

        // Loops through each field update pair
        for (Map<String, String> fieldMap : fieldMaps) {
            System.debug('Current fieldMap: ' + fieldMap);

            // Create a list of object records related to the field update pair
            List<SObject> records = jsonData.get(fieldMap);

            // Loop through those objects
            for (SObject record : records) {
                // Loopsydoo through the field pairs
                for (String fieldName : fieldMap.keySet()) {
                    // Set the field change to the record
                    record.put(fieldName, fieldMap.get(fieldName));
                }

                // Add the updated record to the recordsToUpdate list
                recordsToUpdate.add(record);
            }
        }

        // Call the method to update records
        updateRecords(recordsToUpdate);
    }

    private static void updateRecords(List<SObject> recordsForUpdate) {
        // Perform the bulk update DML operation with partial success
        Database.SaveResult[] saveResults = Database.update(recordsForUpdate, false);

        // Handle the results
        for (Database.SaveResult result : saveResults) {
            if (result.isSuccess()) {
                // Success
                System.debug('Successfully updated record: ' + result.getId());
            } else {
                // Error
                for (Database.Error error : result.getErrors()) {
                    System.debug('Failed to update record: ' + error.getStatusCode() + ' - ' + error.getMessage());
                }
            }
        }
    }
}
